.var-print: &var-print
  - echo $REGISTRY
  - echo $REGISTRY_IMAGE
  - echo $CI_REGISTRY_IMAGE
  - echo $IMAGE_TAG
  - echo $IMAGE_NAME
  - echo $CI_BUILD_ARCHS
  - echo $DOCKERFILE
  - echo $DOCKER_BUILD_DIR
  - echo $DOCKERHUB_USER
  - echo $REPO_URL

dgoss-run:
  image:
    # name: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/secrets/private/docker-runner:latest
    name: donaldrich/function:goss
    entrypoint: [""]
  stage: validate
  variables:
    GOSS_FILES_PATH: $DOCKER_BUILD_DIR
    GOSS_FILE: goss.yaml
    CONTAINER_LOG_OUTPUT: reports/$IMAGE_NAME-$IMAGE_TAG.log
    GOSS_FILES_STRATEGY: cp
  artifacts:
    paths:
      - $CI_PROJECT_DIR/reports/
    # when: always
  before_script:
    - *var-print
    - mkdir -p reports
    - ls
  script:
    - cat $DOCKER_BUILD_DIR/goss.yaml
    - docker pull donaldrich/$IMAGE_NAME:$IMAGE_TAG
    - dgoss run donaldrich/$IMAGE_NAME:$IMAGE_TAG
  rules:
    - if: '$DISABLE_GOSS == "true"'
      when: never
    - if: '$ENABLE_GOSS == "true"'
      when: on_success
    - when: on_success
  #   - exists:
  #     - "**/*/goss.yml"
  #     when: always
  #   - when: never

.dgoss-template:
  image:
    # name: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/secrets/private/docker-runner:latest
    name: donaldrich/function:goss
    entrypoint: [""]
  stage: validate
  variables:
    GOSS_FILES_PATH: Dockerfiles/$IMAGE_TAG
    GOSS_FILES_STRATEGY: cp
    GIT_STRATEGY: none
    # CONTAINER_LOG_OUTPUT: Dockerfiles/$IMAGE_TAG/goss.log
  script:
    - docker pull donaldrich/$IMAGE_NAME:$IMAGE_TAG
    - dgoss run donaldrich/$IMAGE_NAME:$IMAGE_TAG
  # rules:
  #   - exists:
  #     - "**/*/goss.yml"
  #     when: always
  #   - when: never
