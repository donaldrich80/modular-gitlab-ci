# cargo
variables:
  CARGO_HOME: $CI_PROJECT_DIR/.cargo
  APT_CACHE_DIR: $CI_PROJECT_DIR/apt
  RUST_BACKTRACE: "FULL"
#   PIP_CACHE_DIR: $CI_PROJECT_DIR/.cache/pip
#   PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip-cache"
#   GIT_CLONE_PATH: $CI_BUILDS_DIR/project-name
# variables:
#   ANSIBLE_CACHE: $CI_PROJECT_DIR/.ansible
  # GIT_DEPTH: "1"
cache:
  paths:
    - "$CI_PROJECT_DIR/pip-cache"
    - .cargo
    - $HOME/.cargo/
    - target/
  key: "$CI_PROJECT_ID"
  untracked: true

before_script:
  - apt-get update -yq
  - apt-get install -o dir::cache::archives="$APT_CACHE_DIR" -y {{ DEPENDENCIES }}

# Define a yaml template for running a build and then running your tests
.cargo_test_template: &cargo_test
  script:
  - rustc --version && cargo --version
  - cargo build
  - cargo test --verbose

# Set any required environment variables here


# Do any pre-flight requirements here, such as updating $PATH installing dependencies
# before_script:
#   - export PATH="/root/.cargo/bin:$PATH"